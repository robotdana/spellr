#!/usr/bin/env ruby
# frozen_string_literal: true

::Encoding.default_external = ::Encoding::UTF_8
::Encoding.default_internal = ::Encoding::UTF_8

require_relative 'util/write'
require 'set'

class RubyWords
  include Write

  KEYWORDS = %w{
    __ENCODING__ __LINE__ __FILE__ BEGIN END alias and begin break case class def
    defined? do else elsif end ensure false for if in module next nil not or redo
    rescue retry return self super then true undef unless until when while yield
  }.freeze

  CONVENTION_WORDS = %w{
    klass kwarg kwargs usr
  }.freeze

  STDLIBS = %w{
    base64 bigdecimal cgi cmath coverage date delegate digest
    e2mmap English erb etc expect fcntl fileutils find forwardable
    io/console io/nonblock io/wait ipaddr json mkmf
    monitor net/http net/telnet mathn
    objspace open-uri open3 openssl optionparser optparse pathname
    pp prettyprint psych pty racc/parser resolv ripper scanf
    sdbm securerandom set shell shellwords singleton socket stringio strscan sync
    tempfile thwait time timeout tmpdir tracer tsort uri weakref yaml zlib
    bundler dbm gdbm racc rake rexml/document rubygems
  }.freeze

  # spellr:disable
  NON_WORDS = %w{
    Racc_No_Extentions
  }.freeze
  # spellr:enable

  def initialize
    @strings = []
    looked_at(RubyWords, Write, Spellr)
    require_stdlibs
    collect_words
    append_wordlist((@strings.to_a - NON_WORDS).join("\n"), :ruby)
  end

  private

  def collect_words
    $VERBOSE = nil
    check_and_collect_words_for(Module)
    add_words STDLIBS
    add_words KEYWORDS
    add_words CONVENTION_WORDS
  end

  def check_and_collect_words_for(constant)
    return if looked_at?(constant) # to prevent endless loops

    looked_at(constant)

    collect_words_for(constant)
  end

  def collect_words_for(constant)
    collect_instance_methods_for(constant)
    collect_singleton_methods_for(constant)
    collect_constants_for(constant)
  end

  def collect_instance_methods_for(constant)
    return unless constant.respond_to?(:public_instance_methods)

    methods = constant.public_instance_methods(false)
    add_words methods
    add_words(methods.flat_map do |m|
      constant.instance_method(m).parameters.select { |r| r.first == :key }.map(&:last)
    end)
  end

  def collect_singleton_methods_for(constant)
    methods = constant.public_methods(false)
    add_words methods
    add_words(methods.flat_map do |m|
      constant.method(m).parameters.select { |r| r.first == :key }.map(&:last)
    end)
  end

  def collect_constants_for(constant)
    return unless constant.respond_to?(:constants)

    constant.constants.each do |child|
      add_words(child)
      check_and_collect_words_for(constant.const_get(child))
    rescue StandardError, LoadError => e
      warn "Error loading #{constant}::#{child} => #{e.message}"
    end
  end

  def looked_at(*constants)
    @looked_at ||= Set.new
    @looked_at += constants.map(&:__id__)
  end

  def looked_at?(constant)
    @looked_at ||= Set.new
    @looked_at.include?(constant.__id__)
  end

  def add_words(words)
    @strings ||= Set.new
    @strings += Array(words).map { |x| x.to_s.encode(::Encoding::UTF_8) }
  end

  def require_stdlibs
    STDLIBS.each do |lib|
      require lib
    rescue LoadError, TypeError
      puts "can't load #{lib}"
    end
  end
end

RubyWords.new
